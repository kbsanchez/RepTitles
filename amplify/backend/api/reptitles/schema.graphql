enum Parent {
  NOTPARENT
  SIRE
  DAM
}

type Transaction @model @auth(rules: [{allow: owner, operations: [create, read, update]}]) {
  id: ID!
  documentID: ID! @index(name: "byDocument")
}

type Clutch @model @auth(rules: [{allow: owner}]) {
  id: ID!
  Reptiles: [Reptile] @hasMany(indexName: "byClutch", fields: ["id"])
  hatchDate: AWSDate
  species: String
  Sire: Reptile @hasOne
  Dam: Reptile @hasOne
  breederName: String
  typeOfReptile: String
  breederEmail: String
}

enum DocType {
  HATCH
  SALE
}

enum Sex {
  MALE
  FEMALE
  UNKNOWN
}

type Reptile @model @auth(rules: [{allow: owner}]) {
  id: ID!
  typeOfReptile: String
  documents: [Document] @hasMany(indexName: "byReptile", fields: ["id"])
  species: String
  alias: String!
  sex: Sex
  hatchDate: AWSDate
  breederName: String
  breederEmail: String
  clutchID: ID @index(name: "byClutch")
  image: String
  isParent: Parent
  sold: Boolean
  notes: String
}

type Document @model @auth(rules: [{allow: owner}]) {
  id: ID!
  reptile: Reptile @belongsTo
  reptileID: ID @index(name: "byReptile")
  docType: DocType
  breederName: String
  breederEmail: String
  ownerName: String
  ownerEmail: String
  Transactions: [Transaction] @hasMany(indexName: "byDocument", fields: ["id"])
  purchaseOrHatchDate: AWSDate
}
 